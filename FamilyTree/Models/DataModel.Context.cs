//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FamilyTree.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_KenWorthEntities : DbContext
    {
        public DB_KenWorthEntities()
            : base("name=DB_KenWorthEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Build_Table> Build_Table { get; set; }
        public virtual DbSet<Drain_Data> Drain_Data { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<ExemptCard_Card_Data> ExemptCard_Card_Data { get; set; }
        public virtual DbSet<FillerNeck_Data> FillerNeck_Data { get; set; }
        public virtual DbSet<FuelTankShipTracking> FuelTankShipTrackings { get; set; }
        public virtual DbSet<HA_66a_LabelData> HA_66a_LabelData { get; set; }
        public virtual DbSet<Heater_Data> Heater_Data { get; set; }
        public virtual DbSet<Lable_Data> Lable_Data { get; set; }
        public virtual DbSet<SendingUnit_Data> SendingUnit_Data { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TankFront_Data> TankFront_Data { get; set; }
        public virtual DbSet<TankRear_Data> TankRear_Data { get; set; }
        public virtual DbSet<TankTransaction_Data> TankTransaction_Data { get; set; }
        public virtual DbSet<ToughTruckStartView> ToughTruckStartViews { get; set; }
        public virtual DbSet<uvw_EXT_RESOURCE_ChassisInProcess> uvw_EXT_RESOURCE_ChassisInProcess { get; set; }
        public virtual DbSet<Vent_Data> Vent_Data { get; set; }
        public virtual DbSet<vw_ChassisInProcess> vw_ChassisInProcess { get; set; }
        public virtual DbSet<vw_ChassisSequenceList> vw_ChassisSequenceList { get; set; }
        public virtual DbSet<vw_FTBuildTableImport> vw_FTBuildTableImport { get; set; }
        public virtual DbSet<vw_FTWDashboard_LineData> vw_FTWDashboard_LineData { get; set; }
        public virtual DbSet<vw_FTWDashboard_PartData> vw_FTWDashboard_PartData { get; set; }
        public virtual DbSet<vw_FuelTankLineSchedulingView> vw_FuelTankLineSchedulingView { get; set; }
        public virtual DbSet<vw_SchedulingProgramRunLine> vw_SchedulingProgramRunLine { get; set; }
        public virtual DbSet<vw_SchedulingProgramTankList> vw_SchedulingProgramTankList { get; set; }
        public virtual DbSet<vw_tbChassisBillOfMaterials> vw_tbChassisBillOfMaterials { get; set; }
        public virtual DbSet<vw_TreadleValveReport> vw_TreadleValveReport { get; set; }
        public virtual DbSet<WebTrapAlert> WebTrapAlerts { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
